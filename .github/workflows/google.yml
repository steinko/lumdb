# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

name: Build and Deploy to GKE

on:
  push:
    branches:
    - master

# Environment variables available to all jobs and steps in this workflow
env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GCP_SA_EMAIL: ${{secrets.GCP_SA_EMAIL }}
  GCP_SA_KEY:  ${{ secrets.GCP_SA_KEY }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: us-west1-a
  IMAGE: lumb
  DEPLOYMENT_NAME: gke-test

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

      
    # Build the Docker image
    - name: Build
      run: |        
        docker build -t $IMAGE -f ./frontend/Dockerfile .
         
    - name: Initialize Google Cloud SDK
      uses: mathrix-education/setup-gcloud@master
  
    - name: Publish app to Google App Engine
      run: |
       # This client-secret.json is converted by GCP_SA_KEY.
       gcloud auth activate-service-account $GCP_SA_EMAIL --key-file=client-secret.json
       gcloud config set project $PROJECT_ID 
       gcloud -q app deploy ./frontend/app.yaml --promote
    
